%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.32.0 (http://poppler.freedesktop.org)
%%Creator:  XeTeX output 2015.12.13:1847
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 775 553
%%HiResBoundingBox: 0 0 774.1 552.93
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 774.1 552.93 re
W
q
q
[1 0 0 1 72 480.93] cm
q
[1 0 0 1 -35.14 -453.53] cm
q
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
0.3985 w
q
q
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
201.24792 467.25385 m
199.85313 466.85533 191.68365 464.16537 183.01605 461.37581 c
142.36795 448.12532 107.00012 428.29942 80.9973 404.08989 c
67.94608 391.83568 61.27103 382.96883 58.2822 373.60382 c
45.13133 331.66055 64.16022 296.09348 113.87444 269.99103 c
160.00206 245.68187 233.32803 230.53845 307.84955 230.04031 c
336.44269 229.84106 343.317 230.23956 327.87471 231.23584 c
294.39981 233.32803 273.57762 239.50494 237.11389 258.13531 c
209.21814 272.38208 187.59892 287.62512 168.86893 306.35512 c
136.29066 338.83374 124.1361 371.71088 133.99924 401.00142 c
141.77019 424.31429 162.59238 445.2361 195.46951 462.77058 c
205.33264 467.95122 206.6278 469.04712 201.24792 467.25383 c
201.24792 467.25385 l
h
f
335.7453 492.06113 m
258.0357 486.9801 193.67621 464.66351 159.8028 430.88974 c
149.44153 420.52846 142.76645 410.36642 138.88098 399.00888 c
135.59326 389.24536 135.09512 374.9986 137.78506 364.63733 c
140.17613 355.27232 149.34189 337.63821 156.71432 327.77509 c
165.28232 316.51715 184.3112 298.18565 197.2628 288.72102 c
206.82706 281.84673 223.46487 270.9873 224.56078 270.9873 c
224.85966 270.9873 223.66414 274.27501 222.07008 278.16049 c
214.19951 297.38864 210.81215 314.12608 210.91179 333.75275 c
210.91179 349.0954 212.20695 356.86636 216.6902 369.71834 c
233.72653 418.73515 292.40724 453.0071 381.07588 465.75943 c
460.67839 477.21661 535.8973 457.49033 591.88806 410.66531 c
615.69908 390.73978 637.61717 362.24625 646.98218 339.13263 c
653.65723 322.69406 656.64606 302.37003 654.75314 285.23404 c
650.96729 249.36807 634.13022 217.7861 601.25308 184.80934 c
566.68227 150.1389 521.94943 122.14352 465.26129 99.62767 c
413.75377 79.204 358.85892 66.75053 298.88306 61.86877 c
281.94635 60.474 228.34665 61.27101 211.70883 63.16394 c
159.90244 69.04196 114.37257 81.79431 74.62112 101.62024 c
60.37436 108.79343 60.57361 108.19566 77.21146 93.74965 c
129.81487 48.2198 192.5803 19.62666 252.55618 13.94788 c
258.63347 13.3501 264.61113 12.75233 266.00592 12.45346 c
278.16049 10.26164 331.85982 8.96649 348.39801 10.4609 c
370.11685 12.35382 378.68481 13.3501 390.54053 15.04378 c
510.79114 32.97676 618.48866 91.25896 668.00363 165.38196 c
675.17682 176.14174 684.54182 195.17062 688.32767 206.72745 c
701.7774 247.37553 697.69266 293.00502 676.87048 333.75275 c
635.02686 416.04521 526.83118 478.21289 402.99399 491.26411 c
389.84312 492.55928 351.48647 493.05742 335.7453 492.06114 c
335.7453 492.06113 l
h
f
396.91669 462.27246 m
372.60754 460.08064 341.62332 453.60484 317.91193 445.73425 c
270.58878 429.99307 240.50122 407.57684 225.55707 377.09079 c
218.98163 363.54141 216.98907 354.97343 216.49094 336.74158 c
215.89317 318.60933 217.7861 305.857 223.76376 288.72102 c
229.04404 273.57762 233.2284 265.80666 237.2135 263.91374 c
240.50122 262.41933 l
247.17627 275.86906 l
254.4491 290.51433 266.0059 308.54695 276.26755 321.39891 c
290.8132 339.3319 313.32906 359.05818 332.25832 370.51537 c
369.22018 392.83195 416.64296 402.99399 462.77058 398.51074 c
529.52113 392.03494 567.87779 362.3459 567.87779 317.11493 c
567.87779 283.73965 546.95598 249.26848 509.89447 221.6716 c
463.96611 187.39969 374.10194 161.79536 273.97612 154.52255 c
258.93233 153.42664 206.62779 153.42664 193.2777 154.52255 c
130.01411 159.70319 83.88649 173.05331 49.31569 196.06729 c
32.27934 207.42485 21.71881 217.58688 10.95903 233.12878 c
5.878 240.60086 l
6.47578 233.12878 l
9.76349 195.56915 20.52328 162.2935 37.45999 136.98807 c
47.72165 121.64542 50.41159 119.65286 76.61368 106.502 c
145.45642 72.3297 229.74142 59.47774 320.60187 69.24124 c
431.28824 81.19656 537.6906 127.52344 599.36014 190.38852 c
624.26706 215.89322 639.31085 240.40161 646.28479 266.90259 c
649.67212 279.85419 650.56879 303.16705 648.1777 316.11865 c
643.29596 342.02185 628.94955 366.53027 603.44489 392.33383 c
572.46066 423.71655 535.00067 444.93726 491.16449 455.69705 c
483.19427 457.58997 472.03596 459.98105 466.25757 460.77806 c
454.10298 462.67099 411.06383 463.56764 396.91669 462.27248 c
396.91669 462.27246 l
h
f
420.42883 393.3301 m
356.06934 388.04984 298.88306 351.68573 262.61858 292.9054 c
256.54129 283.2415 246.08038 262.61858 246.08038 260.5264 c
246.08038 259.92862 250.16512 257.53757 255.1465 255.24612 c
264.21263 251.06177 l
267.30109 253.45282 l
276.76572 260.42676 308.84583 277.16422 329.36914 285.83182 c
373.70346 304.36258 420.12997 314.22571 455.79666 312.4324 c
487.5779 310.93799 498.33769 302.66888 490.66635 286.03107 c
484.29019 272.38208 452.50896 247.67441 431.58714 240.1027 c
403.19325 229.74142 370.71461 225.15855 322.29556 224.66042 c
270.78806 224.06264 226.65298 228.74515 182.8168 239.60457 c
145.45642 248.77031 117.16217 260.2275 93.74966 275.57016 c
83.3884 282.44447 64.65839 300.8756 59.87625 309.04507 c
50.01312 325.98178 46.7254 344.51253 50.31198 363.24252 c
51.10901 367.52652 51.60715 371.11311 51.4079 371.31238 c
51.30826 371.51163 48.61832 368.1243 45.62949 363.93993 c
18.92926 326.67918 5.97766 293.90167 5.97766 263.71448 c
5.97766 252.85506 6.0773 252.05804 9.06613 246.47888 c
14.84454 235.61948 20.12482 228.74515 30.78497 218.08499 c
64.3595 184.61008 120.25064 164.98343 198.25911 159.5039 c
213.50215 158.408 265.20892 158.90614 281.44823 160.30093 c
353.97719 166.6771 416.94188 181.12311 466.25758 202.84195 c
490.66637 213.60175 506.80606 224.2619 524.34053 241.09898 c
537.59102 253.85132 546.35826 265.20888 552.83406 278.45937 c
560.30614 293.40352 562.29869 301.77223 562.29869 316.81602 c
562.29869 327.77507 561.9998 330.16612 559.60875 337.04044 c
549.0482 367.42688 517.86475 386.5554 469.04718 392.53307 c
457.1915 393.92784 433.08159 394.32635 420.42886 393.33008 c
420.42883 393.3301 l
h
f
434.07782 306.654 m
395.42227 304.36258 350.09167 291.11209 306.45474 269.29362 c
290.11581 261.22379 280.7508 255.94353 281.24893 255.34575 c
281.54782 255.1465 288.42213 255.84389 296.49197 256.9398 c
329.07022 261.42305 341.22481 262.31969 363.1429 261.6223 c
394.1271 260.82527 419.43254 258.13533 436.16998 253.85133 c
444.43909 251.75916 l
454.6011 258.63345 l
468.05084 267.69958 484.19054 283.64001 486.68123 290.31506 c
488.3749 294.59906 488.3749 295.39609 487.07973 297.6875 c
482.79573 305.35884 464.46425 308.4473 434.0778 306.65399 c
434.07782 306.654 l
h
f
677.36862 170.46297 m
640.90488 108.49455 559.6087 53.59969 462.27246 25.40506 c
432.28452 16.83707 402.29659 10.66016 377.09079 7.87057 c
348.19876 4.7821 368.32355 4.48325 403.791 7.47208 c
523.04535 17.6341 617.29314 68.54384 667.80437 150.23854 c
673.28389 159.10541 683.84444 179.32983 683.24666 179.82797 c
683.04741 179.9276 680.45709 175.74323 677.36864 170.46297 c
677.36862 170.46297 l
h
f
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
Q
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
