%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.32.0 (http://poppler.freedesktop.org)
%%Creator:  XeTeX output 2015.12.12:1832
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 1052 1030
%%HiResBoundingBox: 0 0 1051.88 1029.92
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 1051.88 1029.92 re
W
q
q
[1 0 0 1 72 957.92] cm
q
[1 0 0 1 -53.18 63.23] cm
q
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
0.3985 w
q
q
/DeviceGray {} CS
[1] SC
/DeviceGray {} cs
[1] sc
477.02731 -0.42839 m
343.02808 7.77095 222.19962 -44.50368 117.92928 -156.1066 c
-17.82338 -301.23425 -15.34267 -402.87442 21.71881 -584.91412 c
46.02797 -704.2681 116.9031 -819.52737 216.05258 -901.10251 c
331.45132 -995.84843 466.92505 -1020.16754 607.958 -971.53928 c
763.33734 -917.93958 911.9918 -764.31369 969.54672 -598.09486 c
1032.07306 -416.94185 984.04256 -252.61594 837.45038 -147.46889 c
711.36159 -56.9671 590.09476 -7.4621 477.03726 -0.43834 c
477.02731 -0.42839 l
h
312.26305 -472.8828 m
278.14056 -472.8828 l
278.00108 -473.899 l
277.8616 -480.48439 273.90639 -538.6271 221.77121 -538.6271 c
175.35468 -538.6271 151.77281 -497.04251 151.77281 -414.87956 c
151.77281 -332.72656 175.34473 -290.98256 221.77121 -290.98256 c
274.78311 -290.98256 278.00108 -353.07054 278.00108 -355.71068 c
278.14056 -356.72688 l
312.26305 -356.72688 l
315.481 -356.72688 318.55952 -355.41179 320.75133 -353.21999 c
322.7937 -351.02818 323.81985 -348.24855 323.68037 -345.31952 c
322.9531 -329.21968 314.75374 -248.81018 221.31293 -248.81018 c
145.89478 -248.81018 105.91418 -306.06621 105.91418 -414.59064 c
105.91418 -523.404 145.89478 -580.95892 221.31293 -580.95892 c
311.22691 -580.95892 322.35533 -507.44366 323.68037 -484.88795 c
323.9693 -481.81941 322.80365 -478.89037 320.75133 -476.54912 c
318.55952 -474.20786 315.48102 -472.89278 312.26305 -472.89278 c
312.26305 -472.8828 l
h
541.31706 -343.71552 m
541.31706 -292.45706 499.73245 -249.10905 448.47401 -249.10905 c
424.3143 -249.10905 402.34639 -258.18513 385.94768 -273.4182 c
385.94768 -255.70439 l
355.05315 -255.70439 l
345.68814 -255.70439 342.1713 -261.85143 342.1713 -268.7357 c
342.1713 -568.07706 l
342.1713 -576.41588 347.29216 -580.95891 354.9037 -580.95891 c
385.79825 -580.95891 l
385.79825 -345.61838 l
385.79825 -314.72385 410.83469 -289.67744 441.73918 -289.67744 c
472.64368 -289.67744 497.68013 -314.71388 497.68013 -345.61838 c
497.67017 -580.96887 l
528.42523 -580.96887 l
536.91351 -580.96887 541.30708 -576.28638 541.30708 -568.08702 c
541.31706 -343.71552 l
h
700.9505 -271.36589 m
702.55452 -269.463 703.43124 -266.98227 703.43124 -264.1927 c
703.43124 -259.07184 700.21327 -254.67825 695.53078 -253.06429 c
686.60413 -250.13522 677.07973 -248.53122 667.12692 -248.53122 c
643.11665 -248.53122 621.14876 -257.75674 604.6006 -272.84038 c
604.6006 -255.12657 l
573.70605 -255.12657 l
564.34106 -255.12657 560.8242 -261.2736 560.8242 -268.15787 c
560.8242 -567.49922 l
560.8242 -575.83806 565.94507 -580.38107 573.55663 -580.38107 c
604.45116 -580.38107 l
604.45116 -345.04056 l
604.45116 -314.14601 629.48761 -289.09962 660.3921 -289.09962 c
668.59146 -289.09962 676.203 -290.85306 683.08728 -293.93156 c
700.95052 -271.5253 l
700.9505 -271.36589 l
h
808.14989 -395.11343 m
778.71988 -382.23157 l
750.31602 -369.78807 740.35326 -357.78294 740.35326 -335.95451 c
740.35326 -307.69016 760.99612 -288.65129 791.90063 -288.65129 c
810.0528 -288.65129 824.99695 -292.45708 843.29855 -311.05757 c
844.31476 -312.07378 l
859.97623 -297.7274 l
869.0523 -289.2391 866.41219 -281.62756 862.6064 -276.78564 c
847.23386 -258.63348 822.77525 -248.67072 793.33527 -248.67072 c
736.66704 -248.67072 695.6603 -285.72226 695.6603 -336.54233 c
695.6603 -386.62517 727.14265 -407.56691 761.26514 -422.79999 c
791.28296 -436.1202 l
821.45023 -449.58987 835.7966 -461.15665 835.7966 -490.3077 c
835.7966 -529.84993 800.07011 -540.39053 778.8295 -540.39053 c
760.67734 -540.39053 740.46288 -536.44528 715.56592 -508.32039 c
714.54971 -507.15474 l
698.15099 -521.65057 l
689.81215 -528.96324 689.6627 -535.26968 697.86208 -545.95972 c
720.40782 -574.80194 753.5141 -580.95894 777.23544 -580.95894 c
828.48393 -580.95894 880.47963 -549.32715 880.47963 -489.14206 c
880.47963 -437.00688 851.6374 -413.87334 808.13995 -395.12341 c
808.14989 -395.11343 l
h
450.10791 -904.95811 m
450.10791 -909.54099 446.3918 -913.23717 441.79897 -913.23717 c
437.24597 -913.23717 433.5199 -909.55095 433.5199 -904.95811 c
433.5199 -340.3979 l
433.5199 -335.81502 437.11647 -332.08896 441.61964 -332.08896 c
446.11284 -332.08896 449.71938 -335.9844 449.71938 -340.48756 c
449.71936 -904.95811 l
450.10791 -904.95811 l
h
f*
/DeviceGray {} CS
[0] SC
/DeviceGray {} cs
[0] sc
Q
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
