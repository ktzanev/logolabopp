%!PS-Adobe-3.0
%Produced by poppler pdftops version: 0.32.0 (http://poppler.freedesktop.org)
%%Creator: cairo 1.13.1 (http://cairographics.org)
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%DocumentMedia: 282x282mm 800 800 0 () ()
%%BoundingBox: 0 0 800 800
%%Pages: 1
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
false pdfSetup
%%EndSetup
%%Page: 1 1
%%PageMedia: 282x282mm
%%PageBoundingBox: 0 0 800 800
%%PageOrientation: Portrait
%%BeginPageSetup
800 800 pdfSetupPaper
pdfStartPage
0 0 800 800 re W
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
q
q
q
[1 0 0 1 0 -0.0429077] cm
q
[1 0 0 1 0 0] cm
0 0 800 800 re
W
q
q
383.008 799.41 m
275.406 805.996 178.391 764.016 94.664 674.41 c
-14.348 557.871 -12.348 476.262 17.402 330.09 c
36.926 234.25 93.84 141.703 173.453 76.203 c
266.117 0.117 374.895 -19.402 488.137 19.637 c
612.906 62.68 732.266 186.035 778.48 319.508 c
828.691 464.973 790.121 596.914 672.41 681.348 c
571.16 754.02 473.789 793.766 383.008 799.41 c
W
[504.986612 0 0 -504.986612 490.95986 493.417617] cm
q
/DeviceRGB {} cs
/x0 0 def
/x1 0 def
/dx 0 def
/y0 0 def
/y1 0 def
/dy 0 def
/r0 0 def
/r1 1 def
/dr 1 def
/t0 0 def
/t1 1 def
/dt 1 def
/n 3 def
/encl true def
/a1 0 def
/a2 360 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.207843 mul 0.282353 add
1 index 1 exp -0.239216 mul 0.392157 add
2 index 1 exp -0.298039 mul 0.572549 add
4 3 roll pop 
}
def
0 1 0 radialSH
0 radialCol sc
0 0 0 0 360 arc h f*
1 radialCol sc
0 0 1 0 360 arc h
-0.972224 -0.60711 m -0.972224 0.977006 l 0.611977 0.977006 l 0.611977 -0.60711 l h f*
Q
Q
/DeviceRGB {} cs
[1 1 1] sc
345.141 77.379 m
345.141 73.969 347.848 72.793 355.727 72.793 c
362.312 72.793 366.426 73.613 366.426 77.73 c
366.426 81.73 362.312 82.668 356.195 82.668 c
349.141 82.668 345.141 81.848 345.141 77.379 c
h
366.781 82.668 m
366.781 82.551 l
368.66 81.73 371.129 80.316 371.129 76.086 c
371.129 69.262 365.484 66.559 355.488 66.559 c
342.555 66.559 340.555 71.145 340.555 75.613 c
340.555 78.672 342.086 81.141 344.672 82.199 c
344.672 82.316 l
331.734 82.316 l
331.734 88.195 l
370.426 88.195 l
370.426 82.668 l
f
352.551 108.188 m
351.023 108.188 l
347.375 108.188 344.555 107.012 344.555 103.602 c
344.555 99.957 348.199 98.781 351.961 98.781 c
352.551 98.781 l
352.551 108.188 l
h
356.547 98.781 m
358.312 98.781 l
362.191 98.781 367.133 99.25 367.133 103.602 c
367.133 107.836 362.312 108.305 360.664 108.305 c
360.664 113.832 l
367.016 113.832 371.129 109.953 371.129 103.602 c
371.129 98.898 369.719 92.898 356.312 92.898 c
348.668 92.898 340.555 94.547 340.555 103.719 c
340.555 111.832 345.379 113.949 353.492 113.949 c
356.547 113.949 l
356.547 98.781 l
h
329.738 104.426 m
329.738 110.891 l
337.5 105.129 l
337.5 101.133 l
f
366.426 129.355 m
366.426 132.648 363.957 134.176 355.961 134.176 c
349.375 134.176 345.141 133.352 345.141 129.238 c
345.141 125.238 349.258 124.297 355.488 124.297 c
362.43 124.297 366.426 125.238 366.426 129.355 c
h
341.262 118.77 m
341.262 124.297 l
344.789 124.297 l
344.789 124.414 l
342.203 125.59 340.555 127.824 340.555 131 c
340.555 137.586 346.199 140.293 356.195 140.293 c
368.426 140.293 371.129 135.352 371.129 131.355 c
371.129 128.18 369.602 125.828 367.016 124.77 c
367.016 124.652 l
379.949 124.652 l
379.949 118.77 l
f
355.02 158.402 m
356.195 156.871 356.902 153.695 357.723 151.934 c
358.547 150.285 360.312 149.582 362.43 149.582 c
364.898 149.582 366.781 150.758 366.781 153.109 c
366.781 156.637 364.191 158.402 359.84 158.402 c
355.02 158.402 l
h
364.309 163.926 m
365.367 163.926 366.426 164.516 366.426 165.457 c
366.426 165.809 366.309 166.16 366.191 166.398 c
369.953 166.398 l
370.309 165.691 370.66 164.633 370.66 163.574 c
370.66 160.988 369.719 158.754 366.898 158.637 c
366.898 158.52 l
369.719 156.988 371.129 154.637 371.129 151.227 c
371.129 146.641 368.543 143.703 363.016 143.703 c
356.43 143.703 355.137 146.523 353.844 150.402 c
352.551 154.992 l
351.961 157.105 351.375 158.402 348.789 158.402 c
346.199 158.402 344.555 157.461 344.555 154.402 c
344.555 150.523 347.258 149.934 350.082 149.934 c
350.082 144.406 l
343.965 144.406 340.555 146.992 340.555 154.637 c
340.555 159.812 342.555 163.926 347.613 163.926 c
f
349.727 182.391 m
349.023 182.391 l
346.672 182.391 344.555 181.566 344.555 178.629 c
344.555 176.273 345.613 174.395 348.316 174.395 c
350.551 174.395 351.492 175.453 352.551 178.508 c
353.844 182.273 l
355.371 186.625 357.605 188.621 362.312 188.621 c
368.426 188.621 371.129 184.035 371.129 178.156 c
371.129 170.75 367.719 168.516 362.074 168.516 c
361.016 168.516 l
361.016 173.805 l
361.957 173.805 l
365.25 173.805 367.133 174.98 367.133 178.273 c
367.133 181.449 365.484 183.098 362.898 183.098 c
360.664 183.098 359.254 181.918 358.547 179.922 c
356.902 175.098 l
355.371 170.75 353.137 168.867 348.551 168.867 c
343.023 168.867 340.555 172.863 340.555 178.863 c
340.555 186.27 344.789 187.918 348.434 187.918 c
349.727 187.918 l
f
349.727 205.438 m
349.023 205.438 l
346.672 205.438 344.555 204.617 344.555 201.676 c
344.555 199.324 345.613 197.441 348.316 197.441 c
350.551 197.441 351.492 198.5 352.551 201.559 c
353.844 205.32 l
355.371 209.672 357.605 211.672 362.312 211.672 c
368.426 211.672 371.129 207.086 371.129 201.207 c
371.129 193.797 367.719 191.562 362.074 191.562 c
361.016 191.562 l
361.016 196.855 l
361.957 196.855 l
365.25 196.855 367.133 198.031 367.133 201.324 c
367.133 204.496 365.484 206.145 362.898 206.145 c
360.664 206.145 359.254 204.969 358.547 202.969 c
356.902 198.148 l
355.371 193.797 353.137 191.914 348.551 191.914 c
343.023 191.914 340.555 195.914 340.555 201.91 c
340.555 209.32 344.789 210.965 348.434 210.965 c
349.727 210.965 l
f
352.551 230.367 m
351.023 230.367 l
347.375 230.367 344.555 229.191 344.555 225.898 c
344.555 222.137 348.199 220.961 351.961 220.961 c
352.551 220.961 l
352.551 230.367 l
h
356.547 220.961 m
358.312 220.961 l
362.191 220.961 367.133 221.434 367.133 225.898 c
367.133 230.016 362.312 230.488 360.664 230.488 c
360.664 236.012 l
367.016 236.012 371.129 232.133 371.129 225.781 c
371.129 221.078 369.719 215.199 356.312 215.199 c
348.668 215.199 340.555 216.727 340.555 225.898 c
340.555 234.016 345.379 236.133 353.492 236.133 c
356.547 236.133 l
f
341.262 240.953 m
341.262 246.832 l
345.848 246.832 l
345.848 246.949 l
342.555 248.242 340.555 250.359 340.555 253.652 c
340.555 254.359 340.672 254.711 340.672 255.062 c
346.672 255.062 l
346.555 254.711 346.316 253.652 346.316 252.711 c
346.316 250.008 347.492 246.832 352.902 246.832 c
370.426 246.832 l
370.426 240.953 l
f
331.734 269.883 38.691 3.172 re
f
353.492 294.105 m
346.316 293.988 343.73 291.988 343.73 287.992 c
343.73 283.992 346.316 281.992 353.492 281.875 c
353.492 294.105 l
h
360.898 297.281 m
367.016 296.809 371.012 293.398 371.012 287.992 c
371.012 281.992 366.781 278.348 355.961 278.348 c
346.082 278.348 341.027 281.992 341.027 288.344 c
341.027 294.695 345.379 297.516 354.902 297.516 c
356.195 297.516 l
356.195 281.875 l
357.488 281.875 l
365.723 281.875 368.309 284.816 368.309 287.992 c
368.309 291.402 365.84 293.516 360.898 293.988 c
f
356.078 307.16 m
354.551 303.16 352.199 301.633 349.258 301.633 c
343.379 301.633 341.027 305.277 341.027 310.215 c
341.027 315.625 343.73 318.094 349.023 318.094 c
349.844 318.094 l
349.844 314.801 l
349.023 314.801 l
345.258 314.801 343.73 313.156 343.73 310.098 c
343.73 306.336 345.73 304.926 348.551 304.926 c
350.551 304.926 352.199 305.512 353.375 308.805 c
355.137 313.508 l
356.668 317.391 359.371 318.801 362.43 318.801 c
367.367 318.801 371.012 316.098 371.012 309.98 c
371.012 304.102 368.543 301.16 362.074 301.16 c
361.137 301.16 l
361.137 304.453 l
361.957 304.453 l
366.191 304.453 368.309 306.219 368.309 309.98 c
368.309 313.391 366.426 315.625 363.133 315.625 c
360.664 315.625 359.02 314.566 357.844 311.746 c
f
345.613 337.262 m
345.613 333.148 l
341.262 333.148 l
341.262 337.262 l
338.555 337.262 l
333.031 337.262 331.266 339.852 331.266 344.672 c
331.266 345.848 331.383 347.023 331.5 347.848 c
335.969 347.848 l
335.969 346.199 l
335.969 344.082 336.793 343.023 338.676 343.023 c
341.262 343.023 l
341.262 347.848 l
345.613 347.848 l
345.613 343.023 l
370.426 343.023 l
370.426 337.262 l
f
341.262 350.434 m
341.262 356.312 l
345.848 356.312 l
345.848 356.43 l
342.555 357.723 340.555 359.84 340.555 363.133 c
340.555 363.84 340.672 364.191 340.672 364.547 c
346.672 364.547 l
346.555 364.191 346.316 363.133 346.316 362.191 c
346.316 359.488 347.492 356.312 352.902 356.312 c
370.426 356.312 l
370.426 350.434 l
f
366.781 377.246 m
366.781 381.48 363.25 382.184 355.844 382.184 c
349.375 382.184 344.789 381.48 344.789 377.246 c
344.789 373.012 349.375 372.188 355.844 372.188 c
363.25 372.188 366.781 373.012 366.781 377.246 c
h
340.555 377.246 m
340.555 385.711 346.789 388.062 355.844 388.062 c
364.898 388.062 371.129 385.359 371.129 377.246 c
371.129 369.133 364.898 366.426 355.844 366.426 c
346.789 366.426 340.555 368.777 340.555 377.246 c
f
341.262 392.531 m
341.262 398.059 l
344.672 398.059 l
344.672 398.293 l
342.086 399.707 340.555 402.527 340.555 405.703 c
340.555 410.172 342.555 412.996 348.434 412.996 c
370.426 412.996 l
370.426 407.113 l
350.434 407.113 l
346.672 407.113 345.141 405.938 345.141 403.117 c
345.141 400.648 347.023 398.414 350.902 398.414 c
370.426 398.414 l
370.426 392.531 l
f
341.262 415.934 m
341.262 419.934 l
333.031 419.934 l
333.031 425.812 l
341.262 425.812 l
341.262 430.633 l
345.613 430.633 l
345.613 425.812 l
363.016 425.812 l
365.25 425.812 366.074 426.52 366.074 428.516 c
366.074 429.34 365.957 430.047 365.84 430.633 c
370.191 430.633 l
370.543 429.34 370.66 427.695 370.66 425.93 c
370.66 421.93 369.602 419.934 363.605 419.934 c
345.613 419.934 l
345.613 415.934 l
f
341.262 433.926 m
341.262 439.688 l
370.426 439.688 l
370.426 433.926 l
341.262 433.926 l
h
331.266 433.926 m
331.266 439.688 l
337.145 439.688 l
337.145 433.926 l
f
352.551 460.031 m
351.023 460.031 l
347.375 460.031 344.555 458.855 344.555 455.562 c
344.555 451.801 348.199 450.625 351.961 450.625 c
352.551 450.625 l
352.551 460.031 l
h
356.547 450.625 m
358.312 450.625 l
362.191 450.625 367.133 451.094 367.133 455.562 c
367.133 459.68 362.312 460.148 360.664 460.148 c
360.664 465.676 l
367.016 465.676 371.129 461.797 371.129 455.445 c
371.129 450.742 369.719 444.863 356.312 444.863 c
348.668 444.863 340.555 446.391 340.555 455.562 c
340.555 463.68 345.379 465.91 353.492 465.91 c
356.547 465.91 l
356.547 450.625 l
h
329.738 449.215 m
329.738 455.801 l
337.5 458.973 l
337.5 454.977 l
f
341.262 470.734 m
341.262 476.496 l
345.848 476.496 l
345.848 476.613 l
342.555 477.906 340.555 480.141 340.555 483.434 c
340.555 484.023 340.672 484.375 340.672 484.844 c
346.672 484.844 l
346.555 484.375 346.316 483.316 346.316 482.375 c
346.316 479.672 347.492 476.496 352.902 476.496 c
370.426 476.496 l
370.426 470.734 l
f
352.551 501.777 m
351.023 501.777 l
347.375 501.777 344.555 500.602 344.555 497.309 c
344.555 493.547 348.199 492.488 351.961 492.488 c
352.551 492.488 l
352.551 501.777 l
h
356.547 492.488 m
358.312 492.488 l
362.191 492.488 367.133 492.961 367.133 497.309 c
367.133 501.426 362.312 501.895 360.664 501.895 c
360.664 507.422 l
367.016 507.422 371.129 503.543 371.129 497.191 c
371.129 492.488 369.719 486.609 356.312 486.609 c
348.668 486.609 340.555 488.254 340.555 497.309 c
340.555 505.426 345.379 507.66 353.492 507.66 c
356.547 507.66 l
f
349.727 524.945 m
349.023 524.945 l
346.672 524.945 344.555 524.238 344.555 521.184 c
344.555 518.828 345.613 516.949 348.316 516.949 c
350.551 516.949 351.492 518.008 352.551 521.062 c
353.844 524.828 l
355.371 529.18 357.605 531.176 362.312 531.176 c
368.426 531.176 371.129 526.59 371.129 520.711 c
371.129 513.422 367.719 511.188 362.074 511.188 c
361.016 511.188 l
361.016 516.359 l
361.957 516.359 l
365.25 516.359 367.133 517.535 367.133 520.828 c
367.133 524.121 365.484 525.652 362.898 525.652 c
360.664 525.652 359.254 524.473 358.547 522.477 c
356.902 517.652 l
355.371 513.305 353.137 511.422 348.551 511.422 c
343.023 511.422 340.555 515.418 340.555 521.418 c
340.555 528.824 344.789 530.473 348.434 530.473 c
349.727 530.473 l
f
250.715 420.051 m
223.312 420.051 l
223.195 419.227 l
223.078 413.934 219.902 367.25 178.039 367.25 c
140.762 367.25 121.828 400.648 121.828 466.617 c
121.828 532.59 140.762 566.102 178.039 566.102 c
220.609 566.102 223.195 516.242 223.195 514.125 c
223.312 513.305 l
250.715 513.305 l
253.301 513.305 255.77 514.359 257.535 516.125 c
259.18 517.891 260.004 520.125 259.887 522.477 c
259.297 535.41 252.711 599.969 177.688 599.969 c
117.125 599.969 85.02 553.992 85.02 466.852 c
85.02 379.48 117.125 333.266 177.688 333.266 c
249.891 333.266 258.828 392.297 259.887 410.406 c
260.121 412.875 259.18 415.23 257.535 417.109 c
255.77 418.992 253.301 420.051 250.715 420.051 c
f
/DeviceRGB {} cs
[0.4 0.8039 0.8863] sc
648.891 482.492 m
625.254 492.84 l
602.441 502.836 594.445 512.48 594.445 530 c
594.445 552.699 611.023 567.984 635.836 567.984 c
650.418 567.984 662.414 564.926 677.113 549.992 c
677.938 549.168 l
690.52 560.695 l
697.809 567.516 695.691 573.629 692.637 577.512 c
680.289 592.09 660.648 600.09 637.012 600.09 c
591.504 600.09 558.578 570.336 558.578 529.531 c
558.578 489.312 583.859 472.496 611.258 460.266 c
635.367 449.566 l
659.59 438.746 671.117 429.457 671.117 406.055 c
671.117 374.305 642.422 365.84 625.371 365.84 c
610.789 365.84 594.562 369.016 574.57 391.594 c
573.746 392.531 l
560.578 380.891 l
553.875 375.012 553.754 369.953 560.34 361.371 c
578.449 338.203 605.027 333.266 624.078 333.266 c
665.234 333.266 706.98 358.664 706.98 406.996 c
706.98 448.859 683.816 467.441 648.891 482.492 c
f
434.633 523.77 m
434.633 564.926 401.234 599.734 360.078 599.734 c
340.672 599.734 323.035 592.445 309.863 580.215 c
309.863 594.445 l
285.051 594.445 l
277.523 594.445 274.703 589.504 274.703 583.977 c
274.703 343.613 l
274.703 336.91 278.816 333.266 284.934 333.266 c
309.746 333.266 l
309.746 522.238 l
309.746 547.055 329.855 567.16 354.668 567.16 c
379.48 567.16 399.59 547.055 399.59 522.238 c
399.59 333.266 l
424.285 333.266 l
431.105 333.266 434.633 337.027 434.633 343.613 c
434.633 523.77 l
f
/DeviceRGB {} cs
[1 1 1] sc
562.809 581.859 m
564.105 583.391 564.809 585.391 564.809 587.625 c
564.809 591.738 562.223 595.266 558.461 596.559 c
551.285 598.914 543.641 600.207 535.645 600.207 c
516.359 600.207 498.723 592.797 485.434 580.684 c
485.434 594.914 l
460.621 594.914 l
453.094 594.914 450.273 589.977 450.273 584.449 c
450.273 344.082 l
450.273 337.379 454.387 333.734 460.504 333.734 c
485.316 333.734 l
485.316 522.711 l
485.316 547.523 505.426 567.633 530.238 567.633 c
536.82 567.633 542.938 566.223 548.465 563.75 c
562.809 581.742 l
f
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
